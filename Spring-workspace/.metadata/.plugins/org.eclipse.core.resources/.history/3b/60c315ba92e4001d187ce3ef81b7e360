<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd">
	
	<!-- Root Context: defines shared resources visible to all other web components -->
	
	<!-- 
		root-context.xml
		서버 구동과 동시에 web.xml파일을 거쳐서 곧바로 로딩되는 문서
		- 보통 서버구동과 동시에 세팅해야하는 내용들을 작성함(db연결정보, 트랜잭션처리)
	 -->
	 
	 <!-- DB연결 설정(총 3단계) -->
     <!--1단계 : DB연결을 위한 도구 설정  
     	id="dataSource" : 자바에서 Connection Pool을 지원하기 위한 인터페이스(자동관리)
     	destroy-method="close" : 주어진 세션을 자동으로 반환하는 설정 -->
	<bean class="org.apache.commons.dbcp.BasicDataSource" id="dataSource" destroy-method="close">
		
		<property name="driverClassName" value="oracle.jdbc.driver.OracleDriver"/>
		<property name="url" value="jdbc:oracle:thin:@localhost:1521:orcl"/>
		<property name="username" value="SPRING"/>
		<property name="password" value="SPRING"/>
	
		<!-- SQL이 수행된 후 자동으로 COMMIT되는 것을 지정 -->
		<property name="defaultAutoCommit" value="false"/>
		
		<!-- 커넥션풀 설정 -->
		<property name="initialSize" value="10"/><!-- 초기 커넥션 수, 기본값 0 -->
		<property name="maxActive" value="50"/>  <!-- 최대 커넥션 수, 기본값 8 -->
		<property name="minIdle" value="10"/>    <!-- 유휴 상태로 존재할 수 있는 커넥션 최소수, 기본값 0            //유휴상태 :컴퓨터 시스템이 사용 가능한 상태이나 실제적인 작업이 없는 시간. -->
		<property name="maxIdle" value="20"/>	 <!-- 유휴 상태로 존재할 수 있는 커넥현 최대수, 기본값 9 -->
		<property name="maxWait" value="-1"/>	 <!-- 예외발생 전 커넥션이 반환될때까지 대기하는 시간, -1(무기한) -->
	</bean>
	<!-- 
		*property는 setter함수로 활용됨
		BasicDataSource dataSource = new BasicDataSource();
		dataSource.setDriverName("oracle.jdbc.driver.OracleDriver");
		,,,
	 -->
	 
	 
	 <!-- 2단계 : 마이바티스 스프링에서 제공하는 sql명령어 실행을 위한 도구 등록
	 	  SqlSession : sql구문을 db에 전달, 실행하는 객체
	 	
	 	  SqlSessionFactory : SqlSession을 만드는 객체
	 	  SqlSessionFactoryBean : mybatis설정파일과 Connection pool정보를 이용하여 sqlSessionFactory를 만드는 객체
	 	  SqlSessionTemplate : SqlSession객체에 트랜잭션처리 역할이 가능하도록 하는 객체
	  -->
	  <bean class="org.mybatis.spring.SqlSessionFactoryBean" id="sqlSessionFactory">
	  		<!-- mybatis 설정파일 위치를 지정 -->
	  		<property name="configLocation" value="classpath:mybatis-config.xml"/>
	  		
	  		<!-- 연결을 위한 도구 -->
	  		<property name="dataSource" ref="dataSource"/>
	  </bean>
	<!-- 내부적으로 객체를 필요할 때 실행되는 코드 
		 SqlSessionFactoryBean sqlSessionFactory = new SqlSessionFactoryBean();
		 sqlSessionFactory.setConfigLocation("classpath:mybatis-config.xml");
		 sqlSessionFactory.setDataSource(dataSource);
	-->
	
	
	<!-- 3단계 : sql구문 실행을 위한 템플릿을 제공하는 도구 등록 
		 SqlSessionTemplate : 기본 SQL문을 실행 + 트랜잭션관리
	-->
	<bean class="org.mybatis.spring.SqlSessionTemplate" id="sqlSession">
		<!-- 내부에 태그가 필요 : sql명령어 실행을 위한 도구에 대한 참조변수필요 -->
		<constructor-arg ref="sqlSessionFactory" />
	</bean>
	<!-- SqlSessionTemplate sqlSession = new SqlSessionTemplate(SqlSessionFactory); -->
	
	<!-- 
		bean내부에 작성되었을때
		property => setter를 통해 값을 주입,
		constructor-arg => 매개변수 있는 생성자를 통해 값을 주입
	 -->
	 
	 <!-- 스프링에서 사용하는 proxy를 이용한 트랜잭션제어가 안먹히는 경우 트랜잭션 매니저를 추가 -->
	 <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
	 		<property name="dataSource" ref="dataSource"></property>
	 </bean>
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	
		
	
</beans>
