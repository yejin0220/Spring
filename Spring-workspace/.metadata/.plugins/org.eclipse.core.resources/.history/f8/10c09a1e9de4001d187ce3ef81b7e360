package com.kh.spring.member.controller;

import com.kh.spring.member.model.service.MemberService;
import com.kh.spring.member.model.service.MemberServiceImpl;
import com.kh.spring.member.model.vo.Member;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.SessionAttributes;

@Controller		//생성된 bean객체가 Controller임을 명시
@RequestMapping("/member")	//localhost:8081/spring/member이하의 url요청을 처리하는 컨트롤러

//로그인, 회원가입 기능 완료 후 실행될 코드
@SessionAttributes({"loginMember"})

public class MemberController {
	
	private MemberService ms = new MemberServiceImpl();
	//기존 객체 생성방식 . 서비스가 동시에 많은 횟수의 요청이 들어오면 그만큼의 객체가 생성
	//객체간의 결합도가 올라감.
	
	//spring의 DI(Dependency Injection) => 객체를 스프링에서 생성해서 주입을 해주는 개념
	//new연산자를 쓰지 않고 필드선언만 한 후 @Autowried라는 어노테이션을 붙여서 내가 필요로 하는 객체를 스프링 컨테이너로부터 주입받을 수 있음.
	
	/*
	 * Autowried를 통한 객체 주입방법
	 * 1. 필드방식 의존성 주입(필드위에 바로 어노테이션붙이는것)
	 * 
	 * 1)필드방식 의존성
	 * 필드방식 의존성 주입 장점 : 이해하기 편하다, 사용하기 편하다
	 * 
	 * 필드방식 의존성 주입 단점 1)순환 의존성 문제가 발생할 수 있다.
	 * 					  2)무분별한 주입시 의존관계 확인이 어렵다.
	 * 
	 */
	@Autowired	//bean으로 등록된 객체 중 타입이 같거나, 상속관계인 bean을 자동으로 주입해주는 역할
	private MemberService memberService;
	

}
